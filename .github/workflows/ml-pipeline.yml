name: ML Pipeline CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  PYTHON_VERSION: 3.9
  MLFLOW_TRACKING_URI: "https://dagshub.com/yahiaehab10/end-to-end-sentiment-analysis.mlflow"

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest flake8 black isort

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Format with black
        run: black --check --diff .

      - name: Sort imports with isort
        run: isort --check-only --diff .

      - name: Run tests
        run: |
          # Create basic tests if they don't exist
          mkdir -p tests
          if [ ! -f tests/test_basic.py ]; then
            echo "import sys; import os; sys.path.append('src'); def test_imports(): from data.data_preprocessing import preprocess_text; assert callable(preprocess_text)" > tests/test_basic.py
          fi
          pytest tests/ -v

  data-validation:
    runs-on: ubuntu-latest
    needs: lint-and-test
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Validate data files
        run: |
          python -c "
          import pandas as pd
          import os

          # Check if data files exist
          required_files = ['data/raw/train.csv', 'data/raw/test.csv']
          for file in required_files:
              if not os.path.exists(file):
                  print(f'Missing required file: {file}')
                  exit(1)
              else:
                  df = pd.read_csv(file)
                  print(f'{file}: {len(df)} rows, {len(df.columns)} columns')
          print('Data validation passed!')
          "

  model-training:
    runs-on: ubuntu-latest
    needs: [lint-and-test, data-validation]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup DVC
        run: |
          pip install dvc
          dvc --version

      - name: Run data ingestion
        run: |
          python src/data/data_ingestion.py

      - name: Run preprocessing
        run: |
          python src/data/data_preprocessing.py

      - name: Run model training
        run: |
          python src/model/model_building.py

      - name: Run model evaluation
        run: |
          python src/model/model_evaluation.py

      - name: Register model
        env:
          MLFLOW_TRACKING_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
          MLFLOW_TRACKING_PASSWORD: ${{ secrets.DAGSHUB_TOKEN }}
        run: |
          python src/model/register_model.py

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: model-artifacts
          path: |
            lgbm_model.pkl
            tfidf_vectorizer.pkl
            confusion_matrix_Test Data.png
            experiment_info.json

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Bandit security scan
        run: |
          pip install bandit
          bandit -r src/ -f json -o security-report.json || true

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.json
